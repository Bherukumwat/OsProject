#include<stdio.h>
void avgWt(int process[], int bt[], int wt[], int n) {
  int rbt[n], ct = 0, i;
  for (i = 0; i < n; i++) {
    rbt[i] = bt[i];
  }
  while (1) {
    int flag = 1, i;
    for (i = 0; i < n; i++) {
      if (rbt[i] > 0) //means process is pending
      {
        flag = 0;
        if (rbt[i] > 1) //in ques quantam is 1
        {
          rbt[i] = rbt[i] - 1;
          ct = ct + 1;
        } else {
          ct = ct + 1;
          wt[i] = ct - bt[i];
          rbt[i] = 0;
        }
      }
    }
    if (flag == 1) break;
  }
}

void findavgTime(int process[], int n, int bt[]) {

  int wt[n], i, total_wt = 0,total_tat=0,tat[n];
  avgWt(process, bt, wt, n);
  printf("Processes\tArrival_time\tBurst_time\tWaiting_time\tTAT\n");
  for (i = 0; i < n; i++) {
    total_wt = total_wt + wt[i];
    tat[i]=bt[i]+wt[i];
    total_tat+=tat[i];
    printf(" %d \t\t%d \t\t %d\t\t%d\t\t%d\n", i + 1, i, bt[i], wt[i],tat[i]);
    
  }
  float t = (float)total_tat/(float)n;
  float f = (float) total_wt / (float)n;
  printf("\n\nthe average waiting time is %f", f);
   printf("\n\nthe average turn around time is %f", t);

}
int main() {
  int n, i;
  printf("Enter the no of process");
  scanf("%d\n", & n);
  int process[n];
  printf("now enter the arrival time of process");\
  for (i = 0; i < n; i++) {
    scanf("\n%d", & process[i]);
  }
  int bursttime[n];
  printf("now enter the burst_time of process");
  for (i = 0; i < n; i++) {
    scanf("\n%d", & bursttime[i]);
  }
  findavgTime(process, n, bursttime);
  return 0;

}
